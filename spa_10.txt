
============================================================
[SPA BOOK] 9.2 큐빅 알고리즘 (The Cubic Algorithm)

[개요]

정적 분석 (static analysis)는 프로그램을 실행하지 않고 코드를 보고
특정 성질을 분석하는 방법이다.

정적 분석 방법은 보통 두 단계로 나누어 진행한다. 1단계에서 프로그램
코드에서 제약식 (constraint equations)을 생성하고, 2단계에서 이
제약식의 해 (solution)를 구하여 특정 성질을 분석한다. 두 번째 단계에서
제약식을 푸는 알고리즘이 필요하다.

다양한 정적 분석 방법에서 제약식의 형태가 다를 수 있고 푸는 알고리즘이
다를 수 있지만, 일반적으로 공통된 형태의 제약식과 공통된 알고리즘을
사용하곤 한다. 큐빅 알고리즘은 많이 사용되는 공통 알고리즘이다.

큐빅 알고리즘에서 다루는 제약식은 다음과 같은 형태를 띄고 있다.

 - 유한개의 토큰 집합 T = {t1, ..., tk}
 - 유한개의 변수 집합 V = {x1, ..., xn}

 - 각 변수들은 T의 부분집합을 해로 갖는다.

 - 제약식 C := t \in x
              (토큰 t는 변수 x의 집합의 원소)
	      
            | t \in x => y \subseteq z
	      (토큰 t가 x의 원소이면 y의 집합에 있는 모든
	      원소는 z의 집합에 속한다.)

큐빅 알고리즘은 이러한 형태의 제약식을 받아 변수들의 최소 해 (minimal
solution)를 구한다.

Exercise: 다음 집합식에서 해와 최소 해의 차이점을 예를 들어 설명하시오.

  X = Y \cup { a }
  Y = X \cup { b }


[큐빅 알고리즘]

큐빅 알고리즘은 DAG (directed acyclic graph)를 사용한다.

DAG의 노드와 에지는 다음과 같이 구성한다.

 - n개 변수에 해당하는 노드를 둔다.
 
 - 각 노드에 k개 토큰을 0과 1로 표시할 수 있는 비트 벡터 (bitvector)의
   속성을 둔다.

 - 각 비트마다 변수 쌍 (x,y) 리스트를 둔다. 아래 보충 설명을 참고한다.

 - 두 노드 사이의 방향성 에지 (directed edge)로 연관된 두 변수 사이의
   포함 관계를 나타낸다.

첫 번째 형태의 제약식 ti \in xj를 확인하려면 변수 xj에 해당하는 j번째
노드를 찾아서 토큰 ti에 해당하는 i번째 비트가 1인지 보면 된다.

두 번째 형태의 제약식 ti \in xj => y \subseteq z은 DAG에서 다음과 같이
나타낸다.

 - 노드 xj의 i번째 비트가 1이면, 이 비트가 가리키는 리스트에서 (y,z)를
   삭제하고 y에 해당하는 노드에서 z에 해당하는 노드로 향하는 에지를
   추가한다.

 - 만일 노드 xj의 i번째 비트가 0이면, 이 비트가 가리키는 리스트에
   (y,z)를 둔다.

새로 추가한 에지로 사이클이 형성되면 이 사이클을 구성하는 모든
노드들을 하나의 노드로 합한다. 각 노드들이 가지고 있던 비트 벡터들을
OR시키고, 각 비트에 연결된 변수 쌍 리스트들은 비트별로 모은다.

 - 알고리즘을 시작할 때는 각 변수당 노드를 1개씩 두는 형태지만
   진행하면서 두 변수가 1개의 노드를 공유할 수 있는 형태가 될 수
   있다. 이점을 고려해서 변수와 노드간의 매핑 자료 구조를
   설계해야한다.

여러 노드의 동일 위치의 비트를 모은 다음 DAG의 에지를 따라 비트 벡터
값들을 전파시킨다.

이 과정을 더이상 새로운 변경 사항이 생기지 않을 때까지 반복한다.

이 반복이 끝날 때 얻은 각 노드의 비트 벡터에 1로 설정된 토큰들의
집합이 해당 노드로 표현한 변수의 최소 해가 된다.


Exercise: 큐빅 알고리즘의 시간 복잡도 O(n^3)을 설명하시오.

 - 교재 설명 참고.


Exercise: 에지를 통해 비트 벡터를 전파하는 방법으로 에지로 연관된 두
비트 사이에 비트 와이어 (bit wire)를 두는 방법을 조사하시오.

 - 교재 설명 참고.

Exericse: SPA 강의노트의 Scala 기반 구현을 실행해보시오.

 - https://cs.au.dk/~amoeller/spa/
 - https://github.com/cs-au-dk/TIP
   .../src/tip/solvers/CubicSolver.scala

 - https://cs.au.dk/~amoeller/spa/8-control-flow-analysis.pdf

============================================================

[SPA BOOK] 10. 포인터 분석 (Pointer Analysis)


정적 분석에서 고려해야할 사항 중 포인터를 다룬다. 포인터를 사용하는
다음 예제를 정적 분석해보자.

 ...
 
 *x = 42
 *y = -87;
 z = *x;

 ...

z의 값을 정적 분석하면 포인터 변수 x와 포인터 변수 y가 동일한 int
변수(또는 메모리 영역)를 가리키는지에 따라 그 결과가 달라진다.

 - x와 y가 동일한 변수를 가리키지 않으면, z는 42이고,

 - x와 y가 동일한 변수를 가리킨다면, z는 -87이고,

 - 두 가지 가능성이 모두 있다면, z는 42 또는 -87이다.


10.1 메모리 할당 위치에 대한 추상화 (Allocation-Site Abstraction)

포인터 분석에서 가장 중요한 정보는 포인터들이 가르킬 수 있는 (may
point to) 메모리 셀의 전체 집합이다. 실행 중에 사실상 무한히 많은
메모리 셀을 사용할 수 있다. 정적 분석을 위해 유한한 수의 메모리 셀로
추상화해야한다. 

일반적인 방법은

 (1) 프로그램에 나타난 변수 X에 대해 추상 메모리 셀 X를 두고,

 (2) 메모리를 동적으로 할당하는 문장이나 식에 대해 추상 메모리 셀
     alloc-i를 두는 것이다.

변수와 달리 메모리 할당 문장이나 식은 프로그램에 그 이름이 명시되지
않기 때문에 고유 첨자 i를 붙여 서로 구분한다.

 - Cells: 프로그램의 추상 메모리 셀의 전체 집합

포인터 정적 분석은 다음과 같은 함수 pt이다.

 - pt : Vars -> 2^Cells

이 함수는 포인터 변수 X (\in Vars)를 받아 이 변수가 실행 중에 가리킬
수 있는 추상 메모리 셀들의 집합을 결과로 낸다.

앞에서 소개한 예제에서 두 포인터 변수 x와 y가 동일한 추상 메모리 셀을
가리키는지, 즉, x와 y가 서로 앨리어스(alias, 이름은 다르지만 실체는
동일) 되었는지 확인하려면 pt(x)와 pt(y)의 교집합을 구하면 된다.

 - pt(x)와 pt(y)의 교집합이 비어있으면 절대 앨리어스 될 수 없고,
 - 그렇치 않으면, 앨리얼스 될 수 있다.

May-analysis vs. Must-analysis

 - 포인터 정적 분석을 설계하는 방법에 따라 pt 함수의 결과를 가리킬
   가능성이 있는(may-point-to) 추상 메모리 셀 집합을 내거나 반드시
   가리키는(must-point-to) 추상 메모리 셀 집합을 낼 수 있다.  이
   교재에서는 주로 전자의 의미의 결과를 내는 정적 포인터 분석을
   이야기한다.

Flow-insenstive analysis vs. Flow-senstivie analysis

 - 또한 포인터 정적 분석은 흐름에 민감하지 않은 (flow-insensitive)
   방식이나 흐름에 민감한 (flow-senstivie) 방식을 택할 수 있다.


Almost-trivial analysis

 - pt1 (x) = return Cells

   모든 변수에 대해 추상 메모리 셀 전체 집합을 리턴하면 항상
   may-point-to 기준으로 건전한 (sound) 분석 결과가 된다. 하지만 별로
   유용하지는 않다.

 - pt2 (x : ty) = return { c | c \in Cells, c의 타입이 ty }

   변수의 타입과 일치하는 모든 추상 메모리 셀들을 집합으로 만들어
   리턴하면 건전하면서도 (sound)pt1 보다 더 정확한 분석 결과를 낼 수
   있다.

다음 절에서 pt2보다 더 정확하면서도 여전히 건전한 분석 결과를 내는
포인터 정적 분석 방법인 앤더슨 알고리즘을 살펴본다.


참고 문헌

 - David R. Chase, Mark N. Wegman, and Frank Kenneth Zadeck. Analysis
   of pointers and structures. In Proceedings of the ACM SIGPLAN’90
   Conference on Programming Language Design and Implementation
   (PLDI), White Plains, New York, USA, June 20-22, 1990, pages
   296–310. ACM, 1990.



10.2 앤더슨 알고리즘 (Anderson's algorithm)

앤더슨 알고리즘에 기반한 포인터 정적 분석 방법을 살펴본다.

 - Lars Ole Andersen. Program analysis and specialization for the C
   programming language. PhD thesis, University of Copenhagen, 1994.
   
추상 메모리 셀 c에 대해 도입한 변수를 [[c]]라 표기하자.

프로그램에서 아래와 같은 형태와 같이 포인터를 사용한다고 가정한다.

 - X = alloc P (P는 초기화에 사용할 null 또는 정수 상수)
 - X1 = & X2
 - X1 = X2
 - X1 = * X2
 - *X1 = X2
 - X = null

Exercise: 더블 포인터를 사용하는 문장, **x = **y을 위의 형태만을
사용하도록 수정하시오.


앤더슨 알고리즘에 의하면, 각 포인터 사용 쓰앰새에 대해 다음과 같이
제약식을 생성한다.

 - X = alloc P:  alloc-i \in [[X]
 
 - X1 = & X2:    X2 \in [[X1]]
 
 - X1 = X2:      [[X2]] \subseteq [[X1]]
 
 - X1 = * X2:    For each c \in Cells,
                    c \in [[X2]]  =>  [[c]] \subseteq [[X1]]
		    
 - *X1 = X2:     For each c \in Cells,
                    c \in [[X1]]  =>  [[X2]] \subseteq [[c]]

null 할당문에 대해서 제약식을 생성하지 않았는데, 그 이유는 \emptyset
\subseteq [[X]]는 항상 성립하기 때문이다.

앤더슨 알고리즘에서 다루는 제약식은 앞서 논의했던 큐빅 알고리즘에서 풀
수 있는 형태이다.

포인터 정적 분석 함수 pt(p) = [[p]]로 정의된다.

다음의 예제 프로그램에 앤더슨 알고리즘을 적용해보고자 한다.

 p = alloc null;
 x = y;
 x = z;
 *p = z;
 p = q;
 q = &y;
 x = *p;
 p = &z;

이 프로그램의 경우 전체 추상 메모리 셀 Cells은 다음과 같다.

 - Cells = { p, alloc-1, x, y, z, p, q }


앤더슨 알고리즘으로 생성한 제약식은 다음과 같다.

 alloc-1 \in [[p]]
 
 [[y]] \subseteq [[x]]

 [[z]] \subseteq [[x]]

 For each c \in Cells,
   c \in [[p]]  =>  [[z]] \subseteq [[c]]

 [[q]] \subseteq [[p]]

 y \in [[q]]

 For each c \in Cells,
   c \in [[p]]  =>  [[c]] \subseteq [[x]]

 z \in [[p]]
 
이 제약식의 최소 해는 다음과 같다.

 pt(p) = [[p]] = {alloc-1, y, z}
 pt(q) = [[q]] = {y}


Exercise: 큐빅 알고리즘을 이용하여 위 제약식을 풀고 최소 해를
확인하시오.


Exercise: 앤더슨 알고리즘으로 다음 예제 프로그램을 포인터 분석하시오.

 a = & d;
 b = & e;
 a = b;
 *a = alloc null;


Exercise: 앤더슨 알고리즘으로 다음 예제 프로그램을 포인터 분석하시오.

 z = & x;
 w = & a;
 a = 42;
 if ( a > b ) {
   * z = & a;
   y = & b;
 } else {
   x = & b;
   y = w;
 }


10.3 스티스고 알고리즘 (Steensgaard's algorithm)

앤더슨 알고리즘은 큐빅 알고리즘으로 풀면 O(n^3) 시간 복잡도를
갖는다. 반면에 스티스고 알고리즘은 거의 O(n)에 가까운 시간 복잡도로
포인터 분석한다. 다만 분석 결과는 앤더슨 알고리즘은 스티스고
알고리즘보다 더 정밀하다.

 - Steensgaard, Bjarne (1996). "Points-to analysis in almost linear
   time" (PDF). POPL '96: Proceedings of the 23rd ACM SIGPLAN-SIGACT
   symposium on Principles of programming languages. New York, NY,
   USA: ACM. pp. 32–41. doi:10.1145/237721.237727. ISBN 0-89791-769-3.


스티스고 알고리즘의 기본 아이디어는, 앤더슨 알고리즘의 제약식에서 다룬
집합 포함 관계 (\subseteq)를 집합 동치 관계 (=)로 대치함으로써 정보가
양방향(bidirectional)으로 흐르게 하여 제약식의 최소 해로 빨리 수렴하게 하는 것이다.

스티스고 알고리즘에 의하면, 각 포인터 사용 쓰앰새에 대해 다음과 같이
제약식을 생성한다.

 - X = alloc P:  [[X] = &[[alloc-i]]
 
 - X1 = & X2:    [[X1]] = &[[X2]]
 
 - X1 = X2:      [[X1]] = [[X2]]
 
 - X1 = * X2:    [[X2]] = &alpha  /\  [[X1]] = alpha
		    
 - *X1 = X2:     [[X1]] = &alpha  /\  [[X2]] = alpha

alpha는 필요할 때마다 생성하는 새로운 이름의 변수다.

제약식을 풀 때 아래의 공리를 사용한다.

 - & alpha1 = & alpha2  =>  alpha1 = alpha1

스티스고 알고리즘에 의한 포인터 분석은 다음과 같이 정의할 수 있다.

 - pt(p) = { t \in Cells | [[p]] = &[[t]] }


다음의 예제 프로그램에 스티스고 알고리즘을 적용해보자.

 p = alloc null;      [[p] = &[[alloc-1]]

 x = y;               [[x]] = [[y]]
 x = z;               [[x]] = [[z]]
 *p = z;              [[p]] = &alpha1     [[a]] = alpha1
 p = q;               [[p]] = [[q]]
 q = &y;              [[q]] = &[[y]]
 x = *p;              [[x]] = alpha2      [[p]] = &alpha2
 p = &z;              [[p]] = &[[z]]

위 등식을 풀면 (필요한 경우 공리를 이용하여) 아래의 최소 해를 구한다.

 - pt(p) = pt(q) = { alloc-1, y, z }

앤더슨 알고리즘의 포인터 분석보다 정밀하지 않은 결과를 내지만 더 빨리
최소 해를 구한다.


Exercise: 앤더슨 알고리즘 설명에서 연습문제로 풀었던 두 가지 예제에
스티스고 알고리즘을 적용하여 분석하시오.


Exercise: X1 = *X2에 대해 [[X2]] = &alpha /\ [[X1]] = alpha 제약식
대신 [[X2]] = &[[X1]]을 생성하면 분석 결과에 영향을 미치는지
논의하시오.

마찬가지로, *X1 = X2에 대해 [[X1]] = &alpha /\ [[X2]] = alpha 제약식
대신 [[X1]] = &[[X2]]를 생성하는 경우에 대해서도 논의하시오.


10.4 프로시저간 포인터 분석 (Interprocedural Points-To Analysis)

함수와 포인터를 모두 사용하는 프로그램에서 함수를 힙(메모리 셀)에
저장할 수 있기 때문에 포인터 분석을 하기 전에 포인터를 통해 호출할
함수가 무엇인지 결정하는 제어 흐름 분석 (control flow analysis)을
선행해야 한다.

예를 들어, 포인터 변수가 가리키는 함수를 호출하면서 그 함수의 인자로
해당 포인터 변수를 넘길 수 있다.

 - (*x)(x)

이 경우 제어 흐름 분석을 하기 위해서 포인터 분석이 선행되어야 한다.

따라서, 이러한 닭과 달걀 어느 것이 먼저인지 결정하는 문제
(chicken-and-egg problem)의 해결 방법은 제어 흐름 분석과 포인터 분석을
동시에 하는 것이다.

 - 이 교재 9장에서 제어 흐름 분석을 설명한다.

다음과 같은 함수 호출 형태를 사용한다고 가정하자. 관련된 모든 요소가
변수일 수 있다.

 - X = X'(X1, ..., Xn);

앤더슨 알고리즘에 이 함수 호출에 대해 다음과 같은 제약식을 만들 수 있다.

 - 프로그램의 함수 f에 대해,

     f \in [[f]]

 - For each f(X1', ..., Xn') { ... return X''; }

     f \in [[X']]  => ( [[X1]] \subseteq [[X1']]  /\
                           ...
                        [[Xn]] \subseteq [[Xn']]  /\
		        [[X'']] \subseteq [[X]]
                      )


Exercise: 8.2-8.4절을 참고하여, 앤더슨 알고리즘을 문맥에 민감한
버전(context-senstive)으로 설게하시오.


Exercse: 큐빅 알고리즘으로 제어 흐름 분석을 고려한 앤더슨 알고리즘의
최소 해도 구할 수 있는지? 그렇다면 시간 복잡도는 여전히 O(n^3)으로
가능한지 논의하시오.


10.5 널 포인터 분석 (Null Pointer Analysis)



10.6 흐름에 민감한 포인터 분석 (Flow-Sensitive Points-To Analysis)

10.7 탈출 분석 (Escape Analysis)


