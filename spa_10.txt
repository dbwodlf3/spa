
============================================================

[SPA BOOK] 10. 포인터 분석 (Pointer Analysis)


정적 분석에서 고려해야할 사항 중 포인터를 다룬다. 포인터를 사용하는
다음 예제를 정적 분석해보자.

 ...
 
 *x = 42
 *y = -87;
 z = *x;

 ...

z의 값을 정적 분석하면 포인터 변수 x와 포인터 변수 y가 동일한 int
변수(또는 메모리 영역)를 가리키는지에 따라 그 결과가 달라진다.

 - x와 y가 동일한 변수를 가리키지 않으면, z는 42이고,

 - x와 y가 동일한 변수를 가리킨다면, z는 -87이고,

 - 두 가지 가능성이 모두 있다면, z는 42 또는 -87이다.


10.1 메모리 할당 위치에 대한 추상화 (Allocation-Site Abstraction)

포인터 분석에서 가장 중요한 정보는 포인터들이 가르킬 수 있는 (may
point to) 메모리 셀의 전체 집합이다. 실행 중에 사실상 무한히 많은
메모리 셀을 사용할 수 있다. 정적 분석을 위해 유한한 수의 메모리 셀로
추상화해야한다. 

일반적인 방법은

 (1) 프로그램에 나타난 변수 X에 대해 추상 메모리 셀 X를 두고,

 (2) 메모리를 동적으로 할당하는 문장이나 식에 대해 추상 메모리 셀
     alloc-i를 두는 것이다.

변수와 달리 메모리 할당 문장이나 식은 프로그램에 그 이름이 명시되지
않기 때문에 고유 첨자 i를 붙여 서로 구분한다.

 - Cells: 프로그램의 추상 메모리 셀의 전체 집합

포인터 정적 분석은 다음과 같은 함수 pt이다.

 - pt : Vars -> 2^Cells

이 함수는 포인터 변수 X (\in Vars)를 받아 이 변수가 실행 중에 가리킬
수 있는 추상 메모리 셀들의 집합을 결과로 낸다.

앞에서 소개한 예제에서 두 포인터 변수 x와 y가 동일한 추상 메모리 셀을
가리키는지, 즉, x와 y가 서로 앨리어스(alias, 이름은 다르지만 실체는
동일) 되었는지 확인하려면 pt(x)와 pt(y)의 교집합을 구하면 된다.

 - pt(x)와 pt(y)의 교집합이 비어있으면 절대 앨리어스 될 수 없고,
 - 그렇치 않으면, 앨리얼스 될 수 있다.

May-analysis vs. Must-analysis

 - 포인터 정적 분석을 설계하는 방법에 따라 pt 함수의 결과를 가리킬
   가능성이 있는(may-point-to) 추상 메모리 셀 집합을 내거나 반드시
   가리키는(must-point-to) 추상 메모리 셀 집합을 낼 수 있다.  이
   교재에서는 주로 전자의 의미의 결과를 내는 정적 포인터 분석을
   이야기한다.

Flow-insenstive analysis vs. Flow-senstivie analysis

 - 또한 포인터 정적 분석은 흐름에 민감하지 않은 (flow-insensitive)
   방식이나 흐름에 민감한 (flow-senstivie) 방식을 택할 수 있다.


Almost-trivial analysis

 - pt1 (x) = return Cells

   모든 변수에 대해 추상 메모리 셀 전체 집합을 리턴하면 항상
   may-point-to 기준으로 건전한 (sound) 분석 결과가 된다. 하지만 별로
   유용하지는 않다.

 - pt2 (x : ty) = return { c | c \in Cells, c의 타입이 ty }

   변수의 타입과 일치하는 모든 추상 메모리 셀들을 집합으로 만들어
   리턴하면 건전하면서도 (sound)pt1 보다 더 정확한 분석 결과를 낼 수
   있다.

다음 절에서 pt2보다 더 정확하면서도 여전히 건전한 분석 결과를 내는
포인터 정적 분석 방법인 앤더슨 알고리즘을 살펴본다.


참고 문헌

 - David R. Chase, Mark N. Wegman, and Frank Kenneth Zadeck. Analysis
   of pointers and structures. In Proceedings of the ACM SIGPLAN’90
   Conference on Programming Language Design and Implementation
   (PLDI), White Plains, New York, USA, June 20-22, 1990, pages
   296–310. ACM, 1990.



10.2 앤더슨 알고리즘 (Anderson's algorithm)

앤더슨 알고리즘에 기반한 포인터 정적 분석 방법을 살펴본다.

 - Lars Ole Andersen. Program analysis and specialization for the C
   programming language. PhD thesis, University of Copenhagen, 1994.
   
추상 메모리 셀 c에 대해 도입한 변수를 [[c]]라 표기하자.

프로그램에서 아래와 같은 형태와 같이 포인터를 사용한다고 가정한다.

 - X = alloc P (P는 초기화에 사용할 null 또는 정수 상수)
 - X1 = & X2
 - X1 = X2
 - X1 = * X2
 - *X1 = X2
 - X = null

Exercise: 더블 포인터를 사용하는 문장, **x = **y을 위의 형태만을
사용하도록 수정하시오.


앤더슨 알고리즘에 의하면, 각 포인터 사용 쓰앰새에 대해 다음과 같이
제약식을 생성한다.

 - X = alloc P:  alloc-i \in [[X]]
 
 - X1 = & X2:    X2 \in [[X1]]
 
 - X1 = X2:      [[X2]] \subseteq [[X1]]
 
 - X1 = * X2:    For each c \in Cells,
                    c \in [[X2]]  =>  [[c]] \subseteq [[X1]]
		    
 - *X1 = X2:     For each c \in Cells,
                    c \in [[X1]]  =>  [[X2]] \subseteq [[c]]

null 할당문에 대해서 제약식을 생성하지 않았는데, 그 이유는 \emptyset
\subseteq [[X]]는 항상 성립하기 때문이다.

앤더슨 알고리즘에서 다루는 제약식은 앞서 논의했던 큐빅 알고리즘에서 풀
수 있는 형태이다.

포인터 정적 분석 함수 pt(p) = [[p]]로 정의된다.

다음의 예제 프로그램에 앤더슨 알고리즘을 적용해보고자 한다.

 p = alloc null;
 x = y;
 x = z;
 *p = z;
 p = q;
 q = &y;
 x = *p;
 p = &z;

이 프로그램의 경우 전체 추상 메모리 셀 Cells은 다음과 같다.

 - Cells = { p, alloc-1, x, y, z, p, q }


앤더슨 알고리즘으로 생성한 제약식은 다음과 같다.

 alloc-1 \in [[p]]
 
 [[y]] \subseteq [[x]]

 [[z]] \subseteq [[x]]

 For each c \in Cells,
   c \in [[p]]  =>  [[z]] \subseteq [[c]]

 [[q]] \subseteq [[p]]

 y \in [[q]]

 For each c \in Cells,
   c \in [[p]]  =>  [[c]] \subseteq [[x]]

 z \in [[p]]
 
이 제약식의 최소 해는 다음과 같다.

 pt(p) = [[p]] = {alloc-1, y, z}
 pt(q) = [[q]] = {y}


Exercise: 큐빅 알고리즘을 이용하여 위 제약식을 풀고 최소 해를
확인하시오.


Exercise: 앤더슨 알고리즘으로 다음 예제 프로그램을 포인터 분석하시오.

 a = & d;
 b = & e;
 a = b;
 *a = alloc null;


Exercise: 앤더슨 알고리즘으로 다음 예제 프로그램을 포인터 분석하시오.

 z = & x;
 w = & a;
 a = 42;
 if ( a > b ) {
   * z = & a;
   y = & b;
 } else {
   x = & b;
   y = w;
 }


10.3 스티스고 알고리즘 (Steensgaard's algorithm)

앤더슨 알고리즘은 큐빅 알고리즘으로 풀면 O(n^3) 시간 복잡도를
갖는다. 반면에 스티스고 알고리즘은 거의 O(n)에 가까운 시간 복잡도로
포인터 분석한다. 다만 분석 결과는 앤더슨 알고리즘이 스티스고
알고리즘보다 더 정밀하다.

 - Steensgaard, Bjarne (1996). "Points-to analysis in almost linear
   time" (PDF). POPL '96: Proceedings of the 23rd ACM SIGPLAN-SIGACT
   symposium on Principles of programming languages. New York, NY,
   USA: ACM. pp. 32–41. doi:10.1145/237721.237727. ISBN 0-89791-769-3.


스티스고 알고리즘의 기본 아이디어는, 앤더슨 알고리즘의 제약식에서 다룬
집합 포함 관계 (\subseteq)를 집합 동치 관계 (=)로 대치함으로써 정보가
양방향(bidirectional)으로 흐르게 하여 제약식의 최소 해로 빨리 수렴하게 하는 것이다.

스티스고 알고리즘에 의하면, 각 포인터 사용 쓰앰새에 대해 다음과 같이
제약식을 생성한다.

 - X = alloc P:  [[X]] = &[[alloc-i]]
 
 - X1 = & X2:    [[X1]] = &[[X2]]
 
 - X1 = X2:      [[X1]] = [[X2]]
 
 - X1 = * X2:    [[X2]] = &alpha  /\  [[X1]] = alpha
		    
 - *X1 = X2:     [[X1]] = &alpha  /\  [[X2]] = alpha

alpha는 필요할 때마다 생성하는 새로운 이름의 변수다.

제약식을 풀 때 아래의 공리를 사용한다.

 - & alpha1 = & alpha2  =>  alpha1 = alpha1

스티스고 알고리즘에 의한 포인터 분석은 다음과 같이 정의할 수 있다.

 - pt(p) = { t \in Cells | [[p]] = &[[t]] }


다음의 예제 프로그램에 스티스고 알고리즘을 적용해보자.

 p = alloc null;      [[p]] = &[[alloc-1]]

 x = y;               [[x]] = [[y]]
 x = z;               [[x]] = [[z]]
 *p = z;              [[p]] = &alpha1     [[a]] = alpha1
 p = q;               [[p]] = [[q]]
 q = &y;              [[q]] = &[[y]]
 x = *p;              [[x]] = alpha2      [[p]] = &alpha2
 p = &z;              [[p]] = &[[z]]

위 등식을 풀면 (필요한 경우 공리를 이용하여) 아래의 최소 해를 구한다.

 - pt(p) = pt(q) = { alloc-1, y, z }

앤더슨 알고리즘의 포인터 분석보다 정밀하지 않은 결과를 내지만 더 빨리
최소 해를 구한다.


Exercise: 앤더슨 알고리즘 설명에서 연습문제로 풀었던 두 가지 예제에
스티스고 알고리즘을 적용하여 분석하시오.


Exercise: X1 = *X2에 대해 [[X2]] = &alpha /\ [[X1]] = alpha 제약식
대신 [[X2]] = &[[X1]]을 생성하면 분석 결과에 영향을 미치는지
논의하시오.

마찬가지로, *X1 = X2에 대해 [[X1]] = &alpha /\ [[X2]] = alpha 제약식
대신 [[X1]] = &[[X2]]를 생성하는 경우에 대해서도 논의하시오.


10.4 프로시저간 포인터 분석 (Interprocedural Points-To Analysis)

함수와 포인터를 모두 사용하는 프로그램에서 함수를 힙(메모리 셀)에
저장할 수 있기 때문에 포인터 분석을 하기 전에 포인터를 통해 호출할
함수가 무엇인지 결정하는 제어 흐름 분석 (control flow analysis)을
선행해야 한다.

예를 들어, 포인터 변수가 가리키는 함수를 호출하면서 그 함수의 인자로
해당 포인터 변수를 넘길 수 있다.

 - (*x)(x)

이 경우 제어 흐름 분석을 하기 위해서 포인터 분석이 선행되어야 한다.

따라서, 이러한 닭과 달걀 어느 것이 먼저인지 결정하는 문제
(chicken-and-egg problem)의 해결 방법은 제어 흐름 분석과 포인터 분석을
동시에 하는 것이다.

 - 이 교재 9장에서 제어 흐름 분석을 설명한다.

다음과 같은 함수 호출 형태를 사용한다고 가정하자. 관련된 모든 요소가
변수일 수 있다.

 - X = X'(X1, ..., Xn);

앤더슨 알고리즘에 이 함수 호출에 대해 다음과 같은 제약식을 만들 수 있다.

 - 프로그램의 함수 f에 대해,

     f \in [[f]]

 - For each f(X1', ..., Xn') { ... return X''; }

     f \in [[X']]  => ( [[X1]] \subseteq [[X1']]  /\
                           ...
                        [[Xn]] \subseteq [[Xn']]  /\
		        [[X'']] \subseteq [[X]]
                      )


Exercise: 8.2-8.4절을 참고하여, 앤더슨 알고리즘을 문맥에 민감한
버전(context-senstive)으로 설게하시오.


Exercse: 큐빅 알고리즘으로 제어 흐름 분석을 고려한 앤더슨 알고리즘의
최소 해도 구할 수 있는지? 그렇다면 시간 복잡도는 여전히 O(n^3)으로
가능한지 논의하시오.


10.5 널 포인터 분석 (Null Pointer Analysis)

널 포인터 분석은 포인터 변수에서 널을 참조하는 것을 검사한다. 즉,
*X에서 X가 널이 아닐때만 실행되도록 보장한다.

이 분석에서 포인터 변수에 담을 수 있는 추상 값(abstrat value)로 NN과
Top을 둔다. NN은 절대 널이 아님을 뜻하고, Top은 널 가능성도 포함한다.

 - Null = { NN, Top }
 - NN <= Top

(참고)
 - 집합 Null을 래티스(lattice)라 부른다. 래티스는 집합으로, 원소들간의
   순서(ordering)를 정해두어 두 원소보다 작은 값과 큰 값이 항상 집합에
   포함되는 성질을 가지고 있다.
 
프로그램 추상 상태는 States = Cells -> Null 맵 래티스(map lattice)로
표현한다. 즉, 프로그램의 모든 변수가 NN 또는 Top을 가지고 있다.

 - 맵 래티스
 - {x1|->NN, ... , xn|->NN}              모든 변수가 NN
   {..., xi|->Top,... },                 변수 xi만 Top이고 나머지 변수는 NN
   {..., xi|->Top,...,xj|->Top },        변수 xi와 xj만 Top이고 나머지 변수는 NN
   ...
   {x1|->Top, ... , xn|->Top}            모든 변수가 Top
 - 두 map간 순서는 Null의 순서를 이용하여 정의

포인터 분석은 프로그램의 각 위치, 즉 CFG (Control flow graph, 제어흐름
그래프)의 노드 v에 대해 제약식 변수 [[v]]를 둔다.

포인터 연산을 포함하지 않는 프로그램 포인트 v에 대한 제약식을 다음과 같다.

 - [[v]] = JOIN(v)

 - JOIN(v) = \cup [[w]]   for all w \in pred(v)  (v 이전 위치의 모든 w에 대하여)

포인터 변수를 읽는 식 X1 = *X2에 대한 제약식은 포인터 변수 X2에 읽은 값을 반영해야 한다.

 - X1 = *X2:     [[v]] = load(JOIN(v), X1, X2)

 - load(sigma, X1, X2) = sigma[X1 |-> \sqcup_( alpha \in pt(X2) ) sigma(alpha)]

포인터 변수를 사용하는 다른 오퍼레이션에 대한 제약식도 비슷하게 작성할 수 있다.

 - X = alloc P:  [[v]] = JOIN(v)[X |-> NN, alloc-i |-> Top]
 
 - X1 = &X2:     [[v]] = JOIN(v)[X1 |-> NN]

 - X1 = X2:      [[v]] = JOIN(v)[X1 |-> JOIN(v)(X2)]

 - X = null:     [[v]] = JOIN(v)[X |-> Top]


Exercise: 위 네가지 제약식을 직관적으로 설명하시오.


포인터 변수가 가리키는 메모리 셀에 기록하는 *X1 = X2에 대해서 X1이
가리키는 곳을 고려해서 제약식을 작성해야 한다.

 - *X1 = X2:     [[v]] = store(JOIN(v),X1, X2)

 - store(sigma, X1, X2)
     = sigma_(alpha \in pt(X1) )[alpha |-> sigma(alpha) \sqcup(X2)]

할당문을 모델링할 때 기존의 추상값과 새로운 추상값을 조인(join, 최소
상한값)한다. 이 방식을 약한 갱신(weak update)이라고 부른다. 강한
갱신(strong update)는 기존의 추상값을 없애고 새로운 추상값을 대체하는
방식이다.

 - cf. P.119-120 (오류가 있어 보임)

널 포인터 분석을 완료하면 *X에서 포인터 변수 X를 참조할 때
JOIN(v)(X)=NN이면 X는 절대 널이 아니다!

널 참조 버그를 갖고 있는 예제 프로그램에 널포인터 분석을 적용해보자.

 p = alloc null;
 q = &p;
 n = null;
 *q = n;
 *p = n;

먼저 앤더슨 알고리즘으로 포인터 분석을 적용하여 다음 결과를 얻는다.

 pt(p) = {alloc-1}
 pt(q) = {p}
 pt(n) = {}

이 분석 결과를 바탕으로 널 포인터 분석을 적용하면 일단 다음과 같은
제약식을 얻는다.

 - 
 [[p = alloc null]] = sigma_bottom[p |->NN, alloc-1 |-> Top]
 [[q = &p]]         = [[p |-> alloc null]][q |-> NN]
 [[n = null]]       = [[q = &p]][n |-> Top]
 [[*q = n]]         = [[n = null]][p |->
                            [[n=null]](p) \sqcup [[n=null]](n)]
 [[*p = n]]         = [[*q = n]][alloc-1 |->
                            [[*q = n]](allpc-1) \sqcup [[*q = n]](n)]

 - sigma_bottom = { x|-> NN | 모든 변수 x }

아래와 같이 이 제약식의 최소 해를 구할 수 있다.

 [[p = alloc null]] = [p|->NN, q|->NN, n|->NN, alloc-1|->Top]
 [[q = &p]]         = [p|->NN, q|->NN, n|->NN, alloc-1|->Top]
 [[n = null]]       = [p|->NN, q|->NN, n|->Top, alloc-1|->Top]
 [[*q = n]]         = [p|->Top, q|->NN, n|->Top, alloc-1|->Top]
 [[*p = n]]         = [p|->Top, q|->NN, n|->Top, alloc-1|->Top]

이 분석 결과 *q = n을 실행할 때 포인터 변수 q는 절대 널이 아님을 보일
수 있다. 반면에 *p = n을 실행하면 p가 널이 될 수도 있다는 분석 결과를
얻는다.


10.6 흐름에 민감한 포인터 분석 (Flow-Sensitive Points-To Analysis)

앤더스 알고리즘에 기반한 분석을 흐름에 민감한 분석을 만들어본다.

먼저 포인터 그래프 (points-to graphs)의 래티스를 사용한다. 포인터
그래프의 노드는 주어진 프로그램의 추상 셀이고 에지는 가능한
포인터들이다.

포인터 그래프 간의 순서는 에지 집합의 포함관계로 정한다. Bottom은
에지가 없는 그래피이고, Top은 모든 노드가 완전히 연결된 그래프다.

 - States = 2^(Cells x Cells)

프로그램 포인트, CFG의 노드 v에 대해 제약식 변수 [[v]]를
도입한다. [[v]]는 그 지점에서 모든 가능한 'store'를 표현하는 포인터
그래프를 가리킨다.

제약식을 다음과 같다.

 X = alloc P:  [[v]] = JOIN(v) \downarrow X \cup {(X,alloc-i)}
 X1 = &X2:     [[v]] = JOIN(v) \downarrow V \cup {(X1,X2)}
 X1 = X2:      [[v]] = assign(JOIN(v), X1, X2)
 X1 = *X2:     [[v]] = load(JOIN(v), X1, X2)
 *X1 = X2:     [[v]] = store(JOIN(v), X1, X2)
 X = null:     [[v]] = JOIN(v) \downarrow X

포인터를 다루지 않는 모든 노드에 대해서는

 [[v]] = JOIN(v)

이다.

JOIN(v) = \cup_(w \in pred(v)) [[w]]

sigma \downarrow x = {(s,t) \in sigma | s \not= x }
assign(sigma, x, y) = sigma \downarrow x \cup {(x,t) | (y,t) \in sigma}
load(sigma, x, y) =
   sigma \downarrow x \cup {(x,t) | (y,s) \in sigma, (s,t) \in sigma}
store(sigma, x, y) =
   sigma \cup {(s,t) | (x,s) \in \sigma, (y,t) \in sigma}



Exercise: 다음 프로그램에 흐름에 민감한 앤더슨 알고리즘을 적용하시오.

 var x, y, n, p, q;
 x = alloc null; y = alloc null;
 *x = null; *y = y;
 n = input;
 while (n>0) {
   p = alloc null; q = alloc null;
   *p = x; *q = y;
   x = p; y = q;
   n = n-1;
 }

프로그램 루프를 실행한 다음 분석은 다음과 같은 포인터 그래프를 만든다.

 p |-> alloc-3
 x |-> alloc-3
 x |-> alloc-1
 alloc-3 |-> alloc-3
 alloc-3 |-> alloc-1

 q |->alloc-4
 y |->alloc-4
 y |->alloc-2
 alloc-4 |-> alloc-4
 alloc-4 |-> alloc-2

이 결과를 바탕으로 x와 y는 항상 서로 분리된 그래프를 가리킴을 알 수
있다. 이 사실을 바탕으로, 예를 들어, x와 y를 병렬로 실행할 수 있는
여지가 있다.

이 분석은 각 프로그램 포인트 v에 대해 흐름에 민감한 포인터 분석으로
해석할 수 있다.

 - pt(p) = { t | (p,t) \in [[v]] }

이 분석은 앤더슨 알고리즘보다 더 정밀하다. 물론 해를 구하기 위해 더
많은 비용이 든다. 예를 들어,

 x = &y;
 x = &z;

앤더스 알고리즘은 pt(x) = {y,z}로 계산하지만, 흐름에 민감한 분석은
마지막 프로그램 위치에서 pt(x) = {z}를 계산한다.


10.7 탈출 분석 (Escape Analysis)

다음 프로그램에서 함수 baz에서 리턴하는 포인터 변수는 그 함수 안에서
만 존재하는 지역변수 x를 가리킨다. 함수 실행이 종료된 다음에 이 함수
안에서 선언한 지역 변수를 가리키는 포인터 변수가 있으면 안된다. 이를
분석하는 방법을 탈출 분석 (Escape analysis)라고 한다.

baz() {
  var x;
  return &x:
}

main() {
  var p;
  p = baz(); *p = 1;
  return *p;
}

포인터 분석을 수행한 다음에 탈출 분석을 실행해서 그런 에러를 쉽게 잡을
수 있다. 포인터 그래프에서 리턴 식이 가리킬 수 있는 가능한 셀이 함수
인자나 함수 지역 변수들을 가리키지 않는 것만 확인하면 된다.


